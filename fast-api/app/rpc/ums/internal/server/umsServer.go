// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: ums.proto

package server

import (
	"context"

	"fast-boot/app/rpc/ums/internal/logic"
	"fast-boot/app/rpc/ums/internal/svc"
	"fast-boot/app/rpc/ums/umsPb"
)

type UmsServer struct {
	svcCtx *svc.ServiceContext
	umsPb.UnimplementedUmsServer
}

func NewUmsServer(svcCtx *svc.ServiceContext) *UmsServer {
	return &UmsServer{
		svcCtx: svcCtx,
	}
}

// UserUpdate
func (s *UmsServer) ByOpenId(ctx context.Context, in *umsPb.OpenIdReq) (*umsPb.UserInfoResp, error) {
	l := logic.NewByOpenIdLogic(ctx, s.svcCtx)
	return l.ByOpenId(in)
}

func (s *UmsServer) Bind(ctx context.Context, in *umsPb.BindReq) (*umsPb.UserInfoResp, error) {
	l := logic.NewBindLogic(ctx, s.svcCtx)
	return l.Bind(in)
}

// -------
func (s *UmsServer) UserGet(ctx context.Context, in *umsPb.IdReq) (*umsPb.User, error) {
	l := logic.NewUserGetLogic(ctx, s.svcCtx)
	return l.UserGet(in)
}

func (s *UmsServer) UserPage(ctx context.Context, in *umsPb.PageReq) (*umsPb.UserPageResp, error) {
	l := logic.NewUserPageLogic(ctx, s.svcCtx)
	return l.UserPage(in)
}

func (s *UmsServer) UserAdd(ctx context.Context, in *umsPb.UserForm) (*umsPb.SuccessIdResp, error) {
	l := logic.NewUserAddLogic(ctx, s.svcCtx)
	return l.UserAdd(in)
}

func (s *UmsServer) UserUpdate(ctx context.Context, in *umsPb.UserForm) (*umsPb.SuccessResp, error) {
	l := logic.NewUserUpdateLogic(ctx, s.svcCtx)
	return l.UserUpdate(in)
}

func (s *UmsServer) UserDel(ctx context.Context, in *umsPb.IdsReq) (*umsPb.SuccessResp, error) {
	l := logic.NewUserDelLogic(ctx, s.svcCtx)
	return l.UserDel(in)
}

// third
func (s *UmsServer) UserThirdPage(ctx context.Context, in *umsPb.PageReq) (*umsPb.UserThirdPageResp, error) {
	l := logic.NewUserThirdPageLogic(ctx, s.svcCtx)
	return l.UserThirdPage(in)
}
