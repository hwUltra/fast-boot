// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pb/sys.proto

package sysPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sys_Login_FullMethodName          = "/sysPb.sys/Login"
	Sys_RefreshToken_FullMethodName   = "/sysPb.sys/RefreshToken"
	Sys_UserPage_FullMethodName       = "/sysPb.sys/UserPage"
	Sys_UserGet_FullMethodName        = "/sysPb.sys/UserGet"
	Sys_UserAdd_FullMethodName        = "/sysPb.sys/UserAdd"
	Sys_UserUpdate_FullMethodName     = "/sysPb.sys/UserUpdate"
	Sys_UserChangePwd_FullMethodName  = "/sysPb.sys/UserChangePwd"
	Sys_UserDel_FullMethodName        = "/sysPb.sys/UserDel"
	Sys_RoleList_FullMethodName       = "/sysPb.sys/RoleList"
	Sys_RoleOptions_FullMethodName    = "/sysPb.sys/RoleOptions"
	Sys_RoleGet_FullMethodName        = "/sysPb.sys/RoleGet"
	Sys_RoleAdd_FullMethodName        = "/sysPb.sys/RoleAdd"
	Sys_RoleUpdate_FullMethodName     = "/sysPb.sys/RoleUpdate"
	Sys_RoleDel_FullMethodName        = "/sysPb.sys/RoleDel"
	Sys_RoleMenuIds_FullMethodName    = "/sysPb.sys/RoleMenuIds"
	Sys_RoleSetMenuIds_FullMethodName = "/sysPb.sys/RoleSetMenuIds"
	Sys_Routes_FullMethodName         = "/sysPb.sys/Routes"
	Sys_MenuList_FullMethodName       = "/sysPb.sys/MenuList"
	Sys_MenuGet_FullMethodName        = "/sysPb.sys/MenuGet"
	Sys_MenuAdd_FullMethodName        = "/sysPb.sys/MenuAdd"
	Sys_MenuUpdate_FullMethodName     = "/sysPb.sys/MenuUpdate"
	Sys_MenuDel_FullMethodName        = "/sysPb.sys/MenuDel"
	Sys_MenuOptions_FullMethodName    = "/sysPb.sys/MenuOptions"
	Sys_DeptAdd_FullMethodName        = "/sysPb.sys/DeptAdd"
	Sys_DeptUpdate_FullMethodName     = "/sysPb.sys/DeptUpdate"
	Sys_DeptDel_FullMethodName        = "/sysPb.sys/DeptDel"
	Sys_DeptGet_FullMethodName        = "/sysPb.sys/DeptGet"
	Sys_DeptList_FullMethodName       = "/sysPb.sys/DeptList"
	Sys_DeptOptions_FullMethodName    = "/sysPb.sys/DeptOptions"
	Sys_DictSimList_FullMethodName    = "/sysPb.sys/DictSimList"
	Sys_DictAdd_FullMethodName        = "/sysPb.sys/DictAdd"
	Sys_DictUpdate_FullMethodName     = "/sysPb.sys/DictUpdate"
	Sys_DictDel_FullMethodName        = "/sysPb.sys/DictDel"
	Sys_DictGet_FullMethodName        = "/sysPb.sys/DictGet"
	Sys_DictPage_FullMethodName       = "/sysPb.sys/DictPage"
	Sys_DictDataAdd_FullMethodName    = "/sysPb.sys/DictDataAdd"
	Sys_DictDataUpdate_FullMethodName = "/sysPb.sys/DictDataUpdate"
	Sys_DictDataDel_FullMethodName    = "/sysPb.sys/DictDataDel"
	Sys_DictDataGet_FullMethodName    = "/sysPb.sys/DictDataGet"
	Sys_DictDataPage_FullMethodName   = "/sysPb.sys/DictDataPage"
	Sys_SysNoticePage_FullMethodName  = "/sysPb.sys/SysNoticePage"
)

// SysClient is the client API for Sys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*LoginResp, error)
	UserPage(ctx context.Context, in *UserPageReq, opts ...grpc.CallOption) (*UserPageResp, error)
	UserGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*UserGetResp, error)
	UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*IdResp, error)
	UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*SuccessResp, error)
	UserChangePwd(ctx context.Context, in *UserChangePwdReq, opts ...grpc.CallOption) (*SuccessResp, error)
	UserDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error)
	RoleOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*RoleOptionsResp, error)
	RoleGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysRole, error)
	RoleAdd(ctx context.Context, in *RoleForm, opts ...grpc.CallOption) (*IdResp, error)
	RoleUpdate(ctx context.Context, in *RoleForm, opts ...grpc.CallOption) (*SuccessResp, error)
	RoleDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	RoleMenuIds(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleMenuIdsResp, error)
	RoleSetMenuIds(ctx context.Context, in *RoleSetMenuIdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	Routes(ctx context.Context, in *RoutesReq, opts ...grpc.CallOption) (*RoutesResp, error)
	MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListResp, error)
	MenuGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysMenu, error)
	MenuAdd(ctx context.Context, in *MenuForm, opts ...grpc.CallOption) (*SuccessResp, error)
	MenuUpdate(ctx context.Context, in *MenuForm, opts ...grpc.CallOption) (*SuccessResp, error)
	MenuDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	MenuOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*MenuOptionsResp, error)
	DeptAdd(ctx context.Context, in *DeptForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DeptUpdate(ctx context.Context, in *DeptForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DeptDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	DeptGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDept, error)
	DeptList(ctx context.Context, in *DeptListReq, opts ...grpc.CallOption) (*DeptListResp, error)
	DeptOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*DeptOptionResp, error)
	DictSimList(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*DictSimListResp, error)
	DictAdd(ctx context.Context, in *DictForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DictUpdate(ctx context.Context, in *DictForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DictDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	DictGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDict, error)
	DictPage(ctx context.Context, in *DictPageReq, opts ...grpc.CallOption) (*DictPageResp, error)
	DictDataAdd(ctx context.Context, in *DictDataForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DictDataUpdate(ctx context.Context, in *DictDataForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DictDataDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	DictDataGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDictData, error)
	DictDataPage(ctx context.Context, in *DictDataPageReq, opts ...grpc.CallOption) (*DictDataPageResp, error)
	SysNoticePage(ctx context.Context, in *SysNoticePageReq, opts ...grpc.CallOption) (*SysNoticePageResp, error)
}

type sysClient struct {
	cc grpc.ClientConnInterface
}

func NewSysClient(cc grpc.ClientConnInterface) SysClient {
	return &sysClient{cc}
}

func (c *sysClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Sys_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Sys_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserPage(ctx context.Context, in *UserPageReq, opts ...grpc.CallOption) (*UserPageResp, error) {
	out := new(UserPageResp)
	err := c.cc.Invoke(ctx, Sys_UserPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*UserGetResp, error) {
	out := new(UserGetResp)
	err := c.cc.Invoke(ctx, Sys_UserGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*IdResp, error) {
	out := new(IdResp)
	err := c.cc.Invoke(ctx, Sys_UserAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_UserUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserChangePwd(ctx context.Context, in *UserChangePwdReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_UserChangePwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_UserDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	out := new(RoleListResp)
	err := c.cc.Invoke(ctx, Sys_RoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*RoleOptionsResp, error) {
	out := new(RoleOptionsResp)
	err := c.cc.Invoke(ctx, Sys_RoleOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysRole, error) {
	out := new(SysRole)
	err := c.cc.Invoke(ctx, Sys_RoleGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleAdd(ctx context.Context, in *RoleForm, opts ...grpc.CallOption) (*IdResp, error) {
	out := new(IdResp)
	err := c.cc.Invoke(ctx, Sys_RoleAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleUpdate(ctx context.Context, in *RoleForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_RoleUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_RoleDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleMenuIds(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleMenuIdsResp, error) {
	out := new(RoleMenuIdsResp)
	err := c.cc.Invoke(ctx, Sys_RoleMenuIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleSetMenuIds(ctx context.Context, in *RoleSetMenuIdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_RoleSetMenuIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) Routes(ctx context.Context, in *RoutesReq, opts ...grpc.CallOption) (*RoutesResp, error) {
	out := new(RoutesResp)
	err := c.cc.Invoke(ctx, Sys_Routes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListResp, error) {
	out := new(MenuListResp)
	err := c.cc.Invoke(ctx, Sys_MenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysMenu, error) {
	out := new(SysMenu)
	err := c.cc.Invoke(ctx, Sys_MenuGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuAdd(ctx context.Context, in *MenuForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_MenuAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuUpdate(ctx context.Context, in *MenuForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_MenuUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_MenuDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*MenuOptionsResp, error) {
	out := new(MenuOptionsResp)
	err := c.cc.Invoke(ctx, Sys_MenuOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptAdd(ctx context.Context, in *DeptForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_DeptAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptUpdate(ctx context.Context, in *DeptForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_DeptUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_DeptDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDept, error) {
	out := new(SysDept)
	err := c.cc.Invoke(ctx, Sys_DeptGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptList(ctx context.Context, in *DeptListReq, opts ...grpc.CallOption) (*DeptListResp, error) {
	out := new(DeptListResp)
	err := c.cc.Invoke(ctx, Sys_DeptList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*DeptOptionResp, error) {
	out := new(DeptOptionResp)
	err := c.cc.Invoke(ctx, Sys_DeptOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictSimList(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*DictSimListResp, error) {
	out := new(DictSimListResp)
	err := c.cc.Invoke(ctx, Sys_DictSimList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictAdd(ctx context.Context, in *DictForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_DictAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictUpdate(ctx context.Context, in *DictForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_DictUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_DictDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDict, error) {
	out := new(SysDict)
	err := c.cc.Invoke(ctx, Sys_DictGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictPage(ctx context.Context, in *DictPageReq, opts ...grpc.CallOption) (*DictPageResp, error) {
	out := new(DictPageResp)
	err := c.cc.Invoke(ctx, Sys_DictPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictDataAdd(ctx context.Context, in *DictDataForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_DictDataAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictDataUpdate(ctx context.Context, in *DictDataForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_DictDataUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictDataDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, Sys_DictDataDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictDataGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDictData, error) {
	out := new(SysDictData)
	err := c.cc.Invoke(ctx, Sys_DictDataGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictDataPage(ctx context.Context, in *DictDataPageReq, opts ...grpc.CallOption) (*DictDataPageResp, error) {
	out := new(DictDataPageResp)
	err := c.cc.Invoke(ctx, Sys_DictDataPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SysNoticePage(ctx context.Context, in *SysNoticePageReq, opts ...grpc.CallOption) (*SysNoticePageResp, error) {
	out := new(SysNoticePageResp)
	err := c.cc.Invoke(ctx, Sys_SysNoticePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysServer is the server API for Sys service.
// All implementations must embed UnimplementedSysServer
// for forward compatibility
type SysServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	RefreshToken(context.Context, *RefreshTokenReq) (*LoginResp, error)
	UserPage(context.Context, *UserPageReq) (*UserPageResp, error)
	UserGet(context.Context, *IdReq) (*UserGetResp, error)
	UserAdd(context.Context, *UserAddReq) (*IdResp, error)
	UserUpdate(context.Context, *UserUpdateReq) (*SuccessResp, error)
	UserChangePwd(context.Context, *UserChangePwdReq) (*SuccessResp, error)
	UserDel(context.Context, *IdsReq) (*SuccessResp, error)
	RoleList(context.Context, *RoleListReq) (*RoleListResp, error)
	RoleOptions(context.Context, *AnyReq) (*RoleOptionsResp, error)
	RoleGet(context.Context, *IdReq) (*SysRole, error)
	RoleAdd(context.Context, *RoleForm) (*IdResp, error)
	RoleUpdate(context.Context, *RoleForm) (*SuccessResp, error)
	RoleDel(context.Context, *IdsReq) (*SuccessResp, error)
	RoleMenuIds(context.Context, *IdReq) (*RoleMenuIdsResp, error)
	RoleSetMenuIds(context.Context, *RoleSetMenuIdsReq) (*SuccessResp, error)
	Routes(context.Context, *RoutesReq) (*RoutesResp, error)
	MenuList(context.Context, *MenuListReq) (*MenuListResp, error)
	MenuGet(context.Context, *IdReq) (*SysMenu, error)
	MenuAdd(context.Context, *MenuForm) (*SuccessResp, error)
	MenuUpdate(context.Context, *MenuForm) (*SuccessResp, error)
	MenuDel(context.Context, *IdsReq) (*SuccessResp, error)
	MenuOptions(context.Context, *AnyReq) (*MenuOptionsResp, error)
	DeptAdd(context.Context, *DeptForm) (*SuccessResp, error)
	DeptUpdate(context.Context, *DeptForm) (*SuccessResp, error)
	DeptDel(context.Context, *IdsReq) (*SuccessResp, error)
	DeptGet(context.Context, *IdReq) (*SysDept, error)
	DeptList(context.Context, *DeptListReq) (*DeptListResp, error)
	DeptOptions(context.Context, *AnyReq) (*DeptOptionResp, error)
	DictSimList(context.Context, *AnyReq) (*DictSimListResp, error)
	DictAdd(context.Context, *DictForm) (*SuccessResp, error)
	DictUpdate(context.Context, *DictForm) (*SuccessResp, error)
	DictDel(context.Context, *IdsReq) (*SuccessResp, error)
	DictGet(context.Context, *IdReq) (*SysDict, error)
	DictPage(context.Context, *DictPageReq) (*DictPageResp, error)
	DictDataAdd(context.Context, *DictDataForm) (*SuccessResp, error)
	DictDataUpdate(context.Context, *DictDataForm) (*SuccessResp, error)
	DictDataDel(context.Context, *IdsReq) (*SuccessResp, error)
	DictDataGet(context.Context, *IdReq) (*SysDictData, error)
	DictDataPage(context.Context, *DictDataPageReq) (*DictDataPageResp, error)
	SysNoticePage(context.Context, *SysNoticePageReq) (*SysNoticePageResp, error)
	mustEmbedUnimplementedSysServer()
}

// UnimplementedSysServer must be embedded to have forward compatible implementations.
type UnimplementedSysServer struct {
}

func (UnimplementedSysServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSysServer) RefreshToken(context.Context, *RefreshTokenReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedSysServer) UserPage(context.Context, *UserPageReq) (*UserPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPage not implemented")
}
func (UnimplementedSysServer) UserGet(context.Context, *IdReq) (*UserGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGet not implemented")
}
func (UnimplementedSysServer) UserAdd(context.Context, *UserAddReq) (*IdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdd not implemented")
}
func (UnimplementedSysServer) UserUpdate(context.Context, *UserUpdateReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedSysServer) UserChangePwd(context.Context, *UserChangePwdReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChangePwd not implemented")
}
func (UnimplementedSysServer) UserDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDel not implemented")
}
func (UnimplementedSysServer) RoleList(context.Context, *RoleListReq) (*RoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}
func (UnimplementedSysServer) RoleOptions(context.Context, *AnyReq) (*RoleOptionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleOptions not implemented")
}
func (UnimplementedSysServer) RoleGet(context.Context, *IdReq) (*SysRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleGet not implemented")
}
func (UnimplementedSysServer) RoleAdd(context.Context, *RoleForm) (*IdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAdd not implemented")
}
func (UnimplementedSysServer) RoleUpdate(context.Context, *RoleForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleUpdate not implemented")
}
func (UnimplementedSysServer) RoleDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDel not implemented")
}
func (UnimplementedSysServer) RoleMenuIds(context.Context, *IdReq) (*RoleMenuIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleMenuIds not implemented")
}
func (UnimplementedSysServer) RoleSetMenuIds(context.Context, *RoleSetMenuIdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleSetMenuIds not implemented")
}
func (UnimplementedSysServer) Routes(context.Context, *RoutesReq) (*RoutesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Routes not implemented")
}
func (UnimplementedSysServer) MenuList(context.Context, *MenuListReq) (*MenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuList not implemented")
}
func (UnimplementedSysServer) MenuGet(context.Context, *IdReq) (*SysMenu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuGet not implemented")
}
func (UnimplementedSysServer) MenuAdd(context.Context, *MenuForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuAdd not implemented")
}
func (UnimplementedSysServer) MenuUpdate(context.Context, *MenuForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuUpdate not implemented")
}
func (UnimplementedSysServer) MenuDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuDel not implemented")
}
func (UnimplementedSysServer) MenuOptions(context.Context, *AnyReq) (*MenuOptionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuOptions not implemented")
}
func (UnimplementedSysServer) DeptAdd(context.Context, *DeptForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptAdd not implemented")
}
func (UnimplementedSysServer) DeptUpdate(context.Context, *DeptForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptUpdate not implemented")
}
func (UnimplementedSysServer) DeptDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptDel not implemented")
}
func (UnimplementedSysServer) DeptGet(context.Context, *IdReq) (*SysDept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptGet not implemented")
}
func (UnimplementedSysServer) DeptList(context.Context, *DeptListReq) (*DeptListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptList not implemented")
}
func (UnimplementedSysServer) DeptOptions(context.Context, *AnyReq) (*DeptOptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptOptions not implemented")
}
func (UnimplementedSysServer) DictSimList(context.Context, *AnyReq) (*DictSimListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictSimList not implemented")
}
func (UnimplementedSysServer) DictAdd(context.Context, *DictForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictAdd not implemented")
}
func (UnimplementedSysServer) DictUpdate(context.Context, *DictForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictUpdate not implemented")
}
func (UnimplementedSysServer) DictDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDel not implemented")
}
func (UnimplementedSysServer) DictGet(context.Context, *IdReq) (*SysDict, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictGet not implemented")
}
func (UnimplementedSysServer) DictPage(context.Context, *DictPageReq) (*DictPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictPage not implemented")
}
func (UnimplementedSysServer) DictDataAdd(context.Context, *DictDataForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDataAdd not implemented")
}
func (UnimplementedSysServer) DictDataUpdate(context.Context, *DictDataForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDataUpdate not implemented")
}
func (UnimplementedSysServer) DictDataDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDataDel not implemented")
}
func (UnimplementedSysServer) DictDataGet(context.Context, *IdReq) (*SysDictData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDataGet not implemented")
}
func (UnimplementedSysServer) DictDataPage(context.Context, *DictDataPageReq) (*DictDataPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDataPage not implemented")
}
func (UnimplementedSysServer) SysNoticePage(context.Context, *SysNoticePageReq) (*SysNoticePageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysNoticePage not implemented")
}
func (UnimplementedSysServer) mustEmbedUnimplementedSysServer() {}

// UnsafeSysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysServer will
// result in compilation errors.
type UnsafeSysServer interface {
	mustEmbedUnimplementedSysServer()
}

func RegisterSysServer(s grpc.ServiceRegistrar, srv SysServer) {
	s.RegisterService(&Sys_ServiceDesc, srv)
}

func _Sys_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RefreshToken(ctx, req.(*RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_UserPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserPage(ctx, req.(*UserPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_UserGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_UserAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserAdd(ctx, req.(*UserAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_UserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserUpdate(ctx, req.(*UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserChangePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChangePwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserChangePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_UserChangePwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserChangePwd(ctx, req.(*UserChangePwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_UserDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_RoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_RoleOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleOptions(ctx, req.(*AnyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_RoleGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_RoleAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleAdd(ctx, req.(*RoleForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_RoleUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleUpdate(ctx, req.(*RoleForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_RoleDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleMenuIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleMenuIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_RoleMenuIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleMenuIds(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleSetMenuIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleSetMenuIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleSetMenuIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_RoleSetMenuIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleSetMenuIds(ctx, req.(*RoleSetMenuIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_Routes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).Routes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_Routes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).Routes(ctx, req.(*RoutesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_MenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuList(ctx, req.(*MenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_MenuGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_MenuAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuAdd(ctx, req.(*MenuForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_MenuUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuUpdate(ctx, req.(*MenuForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_MenuDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_MenuOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuOptions(ctx, req.(*AnyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DeptAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptAdd(ctx, req.(*DeptForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DeptUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptUpdate(ctx, req.(*DeptForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DeptDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DeptGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DeptList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptList(ctx, req.(*DeptListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DeptOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptOptions(ctx, req.(*AnyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictSimList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictSimList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DictSimList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictSimList(ctx, req.(*AnyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DictAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictAdd(ctx, req.(*DictForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DictUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictUpdate(ctx, req.(*DictForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DictDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DictGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DictPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictPage(ctx, req.(*DictPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictDataAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDataForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictDataAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DictDataAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictDataAdd(ctx, req.(*DictDataForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictDataUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDataForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictDataUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DictDataUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictDataUpdate(ctx, req.(*DictDataForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictDataDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictDataDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DictDataDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictDataDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictDataGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictDataGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DictDataGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictDataGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictDataPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDataPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictDataPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_DictDataPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictDataPage(ctx, req.(*DictDataPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SysNoticePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysNoticePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SysNoticePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SysNoticePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SysNoticePage(ctx, req.(*SysNoticePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sys_ServiceDesc is the grpc.ServiceDesc for Sys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysPb.sys",
	HandlerType: (*SysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Sys_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Sys_RefreshToken_Handler,
		},
		{
			MethodName: "UserPage",
			Handler:    _Sys_UserPage_Handler,
		},
		{
			MethodName: "UserGet",
			Handler:    _Sys_UserGet_Handler,
		},
		{
			MethodName: "UserAdd",
			Handler:    _Sys_UserAdd_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _Sys_UserUpdate_Handler,
		},
		{
			MethodName: "UserChangePwd",
			Handler:    _Sys_UserChangePwd_Handler,
		},
		{
			MethodName: "UserDel",
			Handler:    _Sys_UserDel_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _Sys_RoleList_Handler,
		},
		{
			MethodName: "RoleOptions",
			Handler:    _Sys_RoleOptions_Handler,
		},
		{
			MethodName: "RoleGet",
			Handler:    _Sys_RoleGet_Handler,
		},
		{
			MethodName: "RoleAdd",
			Handler:    _Sys_RoleAdd_Handler,
		},
		{
			MethodName: "RoleUpdate",
			Handler:    _Sys_RoleUpdate_Handler,
		},
		{
			MethodName: "RoleDel",
			Handler:    _Sys_RoleDel_Handler,
		},
		{
			MethodName: "RoleMenuIds",
			Handler:    _Sys_RoleMenuIds_Handler,
		},
		{
			MethodName: "RoleSetMenuIds",
			Handler:    _Sys_RoleSetMenuIds_Handler,
		},
		{
			MethodName: "Routes",
			Handler:    _Sys_Routes_Handler,
		},
		{
			MethodName: "MenuList",
			Handler:    _Sys_MenuList_Handler,
		},
		{
			MethodName: "MenuGet",
			Handler:    _Sys_MenuGet_Handler,
		},
		{
			MethodName: "MenuAdd",
			Handler:    _Sys_MenuAdd_Handler,
		},
		{
			MethodName: "MenuUpdate",
			Handler:    _Sys_MenuUpdate_Handler,
		},
		{
			MethodName: "MenuDel",
			Handler:    _Sys_MenuDel_Handler,
		},
		{
			MethodName: "MenuOptions",
			Handler:    _Sys_MenuOptions_Handler,
		},
		{
			MethodName: "DeptAdd",
			Handler:    _Sys_DeptAdd_Handler,
		},
		{
			MethodName: "DeptUpdate",
			Handler:    _Sys_DeptUpdate_Handler,
		},
		{
			MethodName: "DeptDel",
			Handler:    _Sys_DeptDel_Handler,
		},
		{
			MethodName: "DeptGet",
			Handler:    _Sys_DeptGet_Handler,
		},
		{
			MethodName: "DeptList",
			Handler:    _Sys_DeptList_Handler,
		},
		{
			MethodName: "DeptOptions",
			Handler:    _Sys_DeptOptions_Handler,
		},
		{
			MethodName: "DictSimList",
			Handler:    _Sys_DictSimList_Handler,
		},
		{
			MethodName: "DictAdd",
			Handler:    _Sys_DictAdd_Handler,
		},
		{
			MethodName: "DictUpdate",
			Handler:    _Sys_DictUpdate_Handler,
		},
		{
			MethodName: "DictDel",
			Handler:    _Sys_DictDel_Handler,
		},
		{
			MethodName: "DictGet",
			Handler:    _Sys_DictGet_Handler,
		},
		{
			MethodName: "DictPage",
			Handler:    _Sys_DictPage_Handler,
		},
		{
			MethodName: "DictDataAdd",
			Handler:    _Sys_DictDataAdd_Handler,
		},
		{
			MethodName: "DictDataUpdate",
			Handler:    _Sys_DictDataUpdate_Handler,
		},
		{
			MethodName: "DictDataDel",
			Handler:    _Sys_DictDataDel_Handler,
		},
		{
			MethodName: "DictDataGet",
			Handler:    _Sys_DictDataGet_Handler,
		},
		{
			MethodName: "DictDataPage",
			Handler:    _Sys_DictDataPage_Handler,
		},
		{
			MethodName: "SysNoticePage",
			Handler:    _Sys_SysNoticePage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/sys.proto",
}
